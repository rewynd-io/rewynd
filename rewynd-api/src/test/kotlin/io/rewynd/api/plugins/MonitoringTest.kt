package io.rewynd.api.plugins

import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.nulls.shouldNotBeNull
import io.kotest.matchers.shouldBe
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.bind
import io.kotest.property.arbitrary.string
import io.ktor.client.request.get
import io.ktor.client.request.header
import io.ktor.http.HttpHeaders
import io.ktor.http.HttpStatusCode
import io.ktor.http.encodeURLPath
import io.ktor.server.application.call
import io.ktor.server.plugins.callid.callId
import io.ktor.server.response.respond
import io.ktor.server.routing.get
import io.ktor.server.routing.routing
import io.ktor.server.sessions.set
import io.ktor.server.testing.testApplication
import io.rewynd.test.checkAllRun

class MonitoringTest : StringSpec({
    "callId in X-Request-Id" {
        Harness.arb.checkAllRun {
            testApplication {
                application {
                    configureMonitoring()
                    routing {
                        get {
                            call.callId shouldBe callId
                            call.respond(HttpStatusCode.OK)
                        }
                    }
                }
                client.get {
                    header(HttpHeaders.XRequestId, callId)
                }
            }
        }
    }

    "callId generated by plugin" {
        Harness.arb.checkAllRun {
            testApplication {
                application {
                    configureMonitoring()
                    routing {
                        get {
                            call.callId.shouldNotBeNull()
                            call.respond(HttpStatusCode.OK)
                        }
                    }
                }
                client.get { }
            }
        }
    }
}) {
    companion object {
        data class Harness(val callId: String) {
            companion object {
                val arb =
                    arbitrary {
                        Harness(Arb.string(minSize = 1).bind().encodeURLPath())
                    }
            }
        }
    }
}
